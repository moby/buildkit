// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: io.proto

package sessionio

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	// Types that are valid to be assigned to Input:
	//	*Message_InitDone
	//	*Message_File
	//	*Message_Resize
	//	*Message_Signal
	Input isMessage_Input `protobuf_oneof:"Input"`
}

func (m *Message) Reset()      { *m = Message{} }
func (*Message) ProtoMessage() {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b0773ef7c1937b, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Input interface {
	isMessage_Input()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_InitDone struct {
	InitDone *InitDoneMessage `protobuf:"bytes,1,opt,name=InitDone,proto3,oneof" json:"InitDone,omitempty"`
}
type Message_File struct {
	File *FdMessage `protobuf:"bytes,2,opt,name=File,proto3,oneof" json:"File,omitempty"`
}
type Message_Resize struct {
	Resize *ResizeMessage `protobuf:"bytes,3,opt,name=Resize,proto3,oneof" json:"Resize,omitempty"`
}
type Message_Signal struct {
	Signal *SignalMessage `protobuf:"bytes,4,opt,name=Signal,proto3,oneof" json:"Signal,omitempty"`
}

func (*Message_InitDone) isMessage_Input() {}
func (*Message_File) isMessage_Input()     {}
func (*Message_Resize) isMessage_Input()   {}
func (*Message_Signal) isMessage_Input()   {}

func (m *Message) GetInput() isMessage_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Message) GetInitDone() *InitDoneMessage {
	if x, ok := m.GetInput().(*Message_InitDone); ok {
		return x.InitDone
	}
	return nil
}

func (m *Message) GetFile() *FdMessage {
	if x, ok := m.GetInput().(*Message_File); ok {
		return x.File
	}
	return nil
}

func (m *Message) GetResize() *ResizeMessage {
	if x, ok := m.GetInput().(*Message_Resize); ok {
		return x.Resize
	}
	return nil
}

func (m *Message) GetSignal() *SignalMessage {
	if x, ok := m.GetInput().(*Message_Signal); ok {
		return x.Signal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_InitDone)(nil),
		(*Message_File)(nil),
		(*Message_Resize)(nil),
		(*Message_Signal)(nil),
	}
}

type InitDoneMessage struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *InitDoneMessage) Reset()      { *m = InitDoneMessage{} }
func (*InitDoneMessage) ProtoMessage() {}
func (*InitDoneMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b0773ef7c1937b, []int{1}
}
func (m *InitDoneMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitDoneMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitDoneMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitDoneMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitDoneMessage.Merge(m, src)
}
func (m *InitDoneMessage) XXX_Size() int {
	return m.Size()
}
func (m *InitDoneMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_InitDoneMessage.DiscardUnknown(m)
}

var xxx_messageInfo_InitDoneMessage proto.InternalMessageInfo

func (m *InitDoneMessage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type FdMessage struct {
	Fd   uint32 `protobuf:"varint,1,opt,name=Fd,proto3" json:"Fd,omitempty"`
	EOF  bool   `protobuf:"varint,2,opt,name=EOF,proto3" json:"EOF,omitempty"`
	Data []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *FdMessage) Reset()      { *m = FdMessage{} }
func (*FdMessage) ProtoMessage() {}
func (*FdMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b0773ef7c1937b, []int{2}
}
func (m *FdMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FdMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FdMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FdMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FdMessage.Merge(m, src)
}
func (m *FdMessage) XXX_Size() int {
	return m.Size()
}
func (m *FdMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FdMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FdMessage proto.InternalMessageInfo

func (m *FdMessage) GetFd() uint32 {
	if m != nil {
		return m.Fd
	}
	return 0
}

func (m *FdMessage) GetEOF() bool {
	if m != nil {
		return m.EOF
	}
	return false
}

func (m *FdMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ResizeMessage struct {
	Rows uint32 `protobuf:"varint,1,opt,name=Rows,proto3" json:"Rows,omitempty"`
	Cols uint32 `protobuf:"varint,2,opt,name=Cols,proto3" json:"Cols,omitempty"`
}

func (m *ResizeMessage) Reset()      { *m = ResizeMessage{} }
func (*ResizeMessage) ProtoMessage() {}
func (*ResizeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b0773ef7c1937b, []int{3}
}
func (m *ResizeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResizeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResizeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResizeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResizeMessage.Merge(m, src)
}
func (m *ResizeMessage) XXX_Size() int {
	return m.Size()
}
func (m *ResizeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResizeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ResizeMessage proto.InternalMessageInfo

func (m *ResizeMessage) GetRows() uint32 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *ResizeMessage) GetCols() uint32 {
	if m != nil {
		return m.Cols
	}
	return 0
}

type SignalMessage struct {
	// we only send name (ie HUP, INT) because the int values
	// are platform dependent.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *SignalMessage) Reset()      { *m = SignalMessage{} }
func (*SignalMessage) ProtoMessage() {}
func (*SignalMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b0773ef7c1937b, []int{4}
}
func (m *SignalMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalMessage.Merge(m, src)
}
func (m *SignalMessage) XXX_Size() int {
	return m.Size()
}
func (m *SignalMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SignalMessage proto.InternalMessageInfo

func (m *SignalMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "moby.sessionio.v1.Message")
	proto.RegisterType((*InitDoneMessage)(nil), "moby.sessionio.v1.InitDoneMessage")
	proto.RegisterType((*FdMessage)(nil), "moby.sessionio.v1.FdMessage")
	proto.RegisterType((*ResizeMessage)(nil), "moby.sessionio.v1.ResizeMessage")
	proto.RegisterType((*SignalMessage)(nil), "moby.sessionio.v1.SignalMessage")
}

func init() { proto.RegisterFile("io.proto", fileDescriptor_75b0773ef7c1937b) }

var fileDescriptor_75b0773ef7c1937b = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xbf, 0x4e, 0xeb, 0x30,
	0x18, 0xc5, 0xe3, 0xf4, 0x6f, 0xbe, 0xde, 0xdc, 0x7b, 0xb1, 0x18, 0xa2, 0x0a, 0x59, 0x55, 0x18,
	0xe8, 0x14, 0x41, 0x19, 0x90, 0x58, 0x80, 0x52, 0x02, 0x19, 0xa0, 0x92, 0x91, 0x18, 0xd8, 0x52,
	0xc5, 0xaa, 0x22, 0xb5, 0x71, 0x15, 0x07, 0x2a, 0x98, 0xfa, 0x08, 0x3c, 0x06, 0x8f, 0xc2, 0xd8,
	0xb1, 0x23, 0x4d, 0x17, 0xc6, 0x3e, 0x02, 0x8a, 0x13, 0x5a, 0x0a, 0x85, 0xed, 0xd8, 0x3e, 0xbf,
	0xa3, 0xef, 0x7c, 0x32, 0x94, 0x7d, 0x6e, 0x0d, 0x42, 0x1e, 0x71, 0xbc, 0xd1, 0xe7, 0x9d, 0x07,
	0x4b, 0x30, 0x21, 0x7c, 0x1e, 0xf8, 0xdc, 0xba, 0xdf, 0x33, 0x47, 0x2a, 0x94, 0x2e, 0x99, 0x10,
	0x6e, 0x97, 0xe1, 0x63, 0x28, 0x3b, 0x81, 0x1f, 0xb5, 0x78, 0xc0, 0x0c, 0x54, 0x43, 0xf5, 0x4a,
	0xc3, 0xb4, 0xbe, 0x11, 0xd6, 0x87, 0x25, 0xa3, 0x2e, 0x14, 0xba, 0xa0, 0x70, 0x03, 0xf2, 0xb6,
	0xdf, 0x63, 0x86, 0x2a, 0xe9, 0xad, 0x35, 0xb4, 0xed, 0x2d, 0x39, 0xe9, 0xc5, 0x87, 0x50, 0xa4,
	0x4c, 0xf8, 0x8f, 0xcc, 0xc8, 0x49, 0xaa, 0xb6, 0x86, 0x4a, 0x0d, 0x4b, 0x32, 0x23, 0x12, 0xf6,
	0xda, 0xef, 0x06, 0x6e, 0xcf, 0xc8, 0xff, 0xc8, 0xa6, 0x86, 0x4f, 0x6c, 0x7a, 0xd1, 0x2c, 0x41,
	0xc1, 0x09, 0x06, 0x77, 0x91, 0xb9, 0x03, 0xff, 0xbe, 0x74, 0xc2, 0x9b, 0x50, 0x60, 0x61, 0xc8,
	0x43, 0xb9, 0x06, 0x8d, 0xa6, 0x07, 0xf3, 0x04, 0xb4, 0xc5, 0xf8, 0xf8, 0x2f, 0xa8, 0xb6, 0x27,
	0xdf, 0x75, 0xaa, 0xda, 0x1e, 0xfe, 0x0f, 0xb9, 0xb3, 0xb6, 0x2d, 0x9b, 0x97, 0x69, 0x22, 0x31,
	0x86, 0x7c, 0xcb, 0x8d, 0x5c, 0x59, 0xeb, 0x0f, 0x95, 0xda, 0x3c, 0x00, 0x7d, 0xa5, 0x4b, 0x62,
	0xa2, 0x7c, 0x28, 0xb2, 0x20, 0xa9, 0x93, 0xbb, 0x53, 0xde, 0x13, 0x32, 0x4b, 0xa7, 0x52, 0x9b,
	0xdb, 0xa0, 0xaf, 0x14, 0x49, 0x4c, 0x57, 0x6e, 0x9f, 0x65, 0x13, 0x4a, 0xdd, 0xb8, 0x81, 0x8a,
	0xd3, 0xb6, 0x79, 0x38, 0x74, 0x43, 0x8f, 0x85, 0xf8, 0x1c, 0xb4, 0xec, 0xe0, 0xb4, 0x71, 0x75,
	0xcd, 0x6a, 0xb2, 0xac, 0xea, 0x2f, 0x6f, 0x75, 0xb4, 0x8b, 0x9a, 0x47, 0xe3, 0x29, 0x51, 0x26,
	0x53, 0xa2, 0xcc, 0xa7, 0x04, 0x8d, 0x62, 0x82, 0x9e, 0x63, 0x82, 0x5e, 0x62, 0x82, 0xc6, 0x31,
	0x41, 0xaf, 0x31, 0x41, 0x6f, 0x31, 0x51, 0xe6, 0x31, 0x41, 0x4f, 0x33, 0xa2, 0x8c, 0x67, 0x44,
	0x99, 0xcc, 0x88, 0x72, 0xab, 0x2d, 0xf2, 0x3a, 0x45, 0xf9, 0xff, 0xf6, 0xdf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x3d, 0x63, 0xc8, 0x22, 0x8b, 0x02, 0x00, 0x00,
}

func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Input == nil {
		if this.Input != nil {
			return false
		}
	} else if this.Input == nil {
		return false
	} else if !this.Input.Equal(that1.Input) {
		return false
	}
	return true
}
func (this *Message_InitDone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_InitDone)
	if !ok {
		that2, ok := that.(Message_InitDone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InitDone.Equal(that1.InitDone) {
		return false
	}
	return true
}
func (this *Message_File) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_File)
	if !ok {
		that2, ok := that.(Message_File)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.File.Equal(that1.File) {
		return false
	}
	return true
}
func (this *Message_Resize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_Resize)
	if !ok {
		that2, ok := that.(Message_Resize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Resize.Equal(that1.Resize) {
		return false
	}
	return true
}
func (this *Message_Signal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_Signal)
	if !ok {
		that2, ok := that.(Message_Signal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Signal.Equal(that1.Signal) {
		return false
	}
	return true
}
func (this *InitDoneMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitDoneMessage)
	if !ok {
		that2, ok := that.(InitDoneMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *FdMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FdMessage)
	if !ok {
		that2, ok := that.(FdMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Fd != that1.Fd {
		return false
	}
	if this.EOF != that1.EOF {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *ResizeMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResizeMessage)
	if !ok {
		that2, ok := that.(ResizeMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rows != that1.Rows {
		return false
	}
	if this.Cols != that1.Cols {
		return false
	}
	return true
}
func (this *SignalMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalMessage)
	if !ok {
		that2, ok := that.(SignalMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&sessionio.Message{")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Message_InitDone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sessionio.Message_InitDone{` +
		`InitDone:` + fmt.Sprintf("%#v", this.InitDone) + `}`}, ", ")
	return s
}
func (this *Message_File) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sessionio.Message_File{` +
		`File:` + fmt.Sprintf("%#v", this.File) + `}`}, ", ")
	return s
}
func (this *Message_Resize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sessionio.Message_Resize{` +
		`Resize:` + fmt.Sprintf("%#v", this.Resize) + `}`}, ", ")
	return s
}
func (this *Message_Signal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sessionio.Message_Signal{` +
		`Signal:` + fmt.Sprintf("%#v", this.Signal) + `}`}, ", ")
	return s
}
func (this *InitDoneMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sessionio.InitDoneMessage{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FdMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sessionio.FdMessage{")
	s = append(s, "Fd: "+fmt.Sprintf("%#v", this.Fd)+",\n")
	s = append(s, "EOF: "+fmt.Sprintf("%#v", this.EOF)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResizeMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sessionio.ResizeMessage{")
	s = append(s, "Rows: "+fmt.Sprintf("%#v", this.Rows)+",\n")
	s = append(s, "Cols: "+fmt.Sprintf("%#v", this.Cols)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignalMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sessionio.SignalMessage{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringIo(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IOForwarderClient is the client API for IOForwarder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IOForwarderClient interface {
	ForwardIO(ctx context.Context, opts ...grpc.CallOption) (IOForwarder_ForwardIOClient, error)
}

type iOForwarderClient struct {
	cc *grpc.ClientConn
}

func NewIOForwarderClient(cc *grpc.ClientConn) IOForwarderClient {
	return &iOForwarderClient{cc}
}

func (c *iOForwarderClient) ForwardIO(ctx context.Context, opts ...grpc.CallOption) (IOForwarder_ForwardIOClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IOForwarder_serviceDesc.Streams[0], "/moby.sessionio.v1.IOForwarder/ForwardIO", opts...)
	if err != nil {
		return nil, err
	}
	x := &iOForwarderForwardIOClient{stream}
	return x, nil
}

type IOForwarder_ForwardIOClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type iOForwarderForwardIOClient struct {
	grpc.ClientStream
}

func (x *iOForwarderForwardIOClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iOForwarderForwardIOClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IOForwarderServer is the server API for IOForwarder service.
type IOForwarderServer interface {
	ForwardIO(IOForwarder_ForwardIOServer) error
}

// UnimplementedIOForwarderServer can be embedded to have forward compatible implementations.
type UnimplementedIOForwarderServer struct {
}

func (*UnimplementedIOForwarderServer) ForwardIO(srv IOForwarder_ForwardIOServer) error {
	return status.Errorf(codes.Unimplemented, "method ForwardIO not implemented")
}

func RegisterIOForwarderServer(s *grpc.Server, srv IOForwarderServer) {
	s.RegisterService(&_IOForwarder_serviceDesc, srv)
}

func _IOForwarder_ForwardIO_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IOForwarderServer).ForwardIO(&iOForwarderForwardIOServer{stream})
}

type IOForwarder_ForwardIOServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type iOForwarderForwardIOServer struct {
	grpc.ServerStream
}

func (x *iOForwarderForwardIOServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iOForwarderForwardIOServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _IOForwarder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moby.sessionio.v1.IOForwarder",
	HandlerType: (*IOForwarderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ForwardIO",
			Handler:       _IOForwarder_ForwardIO_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "io.proto",
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		{
			size := m.Input.Size()
			i -= size
			if _, err := m.Input.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Message_InitDone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_InitDone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InitDone != nil {
		{
			size, err := m.InitDone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Message_File) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_File) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Message_Resize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Resize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Resize != nil {
		{
			size, err := m.Resize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Message_Signal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Signal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Signal != nil {
		{
			size, err := m.Signal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *InitDoneMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitDoneMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitDoneMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintIo(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FdMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FdMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FdMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintIo(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EOF {
		i--
		if m.EOF {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Fd != 0 {
		i = encodeVarintIo(dAtA, i, uint64(m.Fd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResizeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResizeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResizeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cols != 0 {
		i = encodeVarintIo(dAtA, i, uint64(m.Cols))
		i--
		dAtA[i] = 0x10
	}
	if m.Rows != 0 {
		i = encodeVarintIo(dAtA, i, uint64(m.Rows))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignalMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintIo(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIo(dAtA []byte, offset int, v uint64) int {
	offset -= sovIo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Input != nil {
		n += m.Input.Size()
	}
	return n
}

func (m *Message_InitDone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InitDone != nil {
		l = m.InitDone.Size()
		n += 1 + l + sovIo(uint64(l))
	}
	return n
}
func (m *Message_File) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovIo(uint64(l))
	}
	return n
}
func (m *Message_Resize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resize != nil {
		l = m.Resize.Size()
		n += 1 + l + sovIo(uint64(l))
	}
	return n
}
func (m *Message_Signal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Signal != nil {
		l = m.Signal.Size()
		n += 1 + l + sovIo(uint64(l))
	}
	return n
}
func (m *InitDoneMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovIo(uint64(l))
	}
	return n
}

func (m *FdMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fd != 0 {
		n += 1 + sovIo(uint64(m.Fd))
	}
	if m.EOF {
		n += 2
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovIo(uint64(l))
	}
	return n
}

func (m *ResizeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rows != 0 {
		n += 1 + sovIo(uint64(m.Rows))
	}
	if m.Cols != 0 {
		n += 1 + sovIo(uint64(m.Cols))
	}
	return n
}

func (m *SignalMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIo(uint64(l))
	}
	return n
}

func sovIo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIo(x uint64) (n int) {
	return sovIo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`Input:` + fmt.Sprintf("%v", this.Input) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_InitDone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_InitDone{`,
		`InitDone:` + strings.Replace(fmt.Sprintf("%v", this.InitDone), "InitDoneMessage", "InitDoneMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_File) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_File{`,
		`File:` + strings.Replace(fmt.Sprintf("%v", this.File), "FdMessage", "FdMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_Resize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_Resize{`,
		`Resize:` + strings.Replace(fmt.Sprintf("%v", this.Resize), "ResizeMessage", "ResizeMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_Signal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_Signal{`,
		`Signal:` + strings.Replace(fmt.Sprintf("%v", this.Signal), "SignalMessage", "SignalMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitDoneMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitDoneMessage{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FdMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FdMessage{`,
		`Fd:` + fmt.Sprintf("%v", this.Fd) + `,`,
		`EOF:` + fmt.Sprintf("%v", this.EOF) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResizeMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResizeMessage{`,
		`Rows:` + fmt.Sprintf("%v", this.Rows) + `,`,
		`Cols:` + fmt.Sprintf("%v", this.Cols) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignalMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignalMessage{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringIo(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitDone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InitDoneMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &Message_InitDone{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FdMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &Message_File{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResizeMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &Message_Resize{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignalMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Input = &Message_Signal{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitDoneMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitDoneMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitDoneMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FdMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FdMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FdMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fd", wireType)
			}
			m.Fd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fd |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EOF", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EOF = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResizeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResizeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResizeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cols", wireType)
			}
			m.Cols = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cols |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIo = fmt.Errorf("proto: unexpected end of group")
)
